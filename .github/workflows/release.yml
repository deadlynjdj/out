name: Release App

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-macos:
    runs-on: macos-latest
    needs: Analyze
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Make macOS (electron-builder)
        env:
          CSC_LINK: ${{ secrets.mac_certs }}
          CSC_KEY_PASSWORD: ${{ secrets.mac_certs_password }}
        run: yarn make:macos --publish=never -c.mac.identity=null
      - name: Clean up builds
        run: rm -rfv dist/mac dist/mac-arm64
  build-windows:
    runs-on: windows-latest
    needs: Analyze
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Make Windows (electron-builder)
        run: yarn make:win --publish=never
      - name: Clean up builds
        run: Remove-Item dist/win-unpacked -Recurse
  build-linux:
    runs-on: ubuntu-latest
    needs: Analyze
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Make Linux (electron-builder)
        run: yarn make:linux --publish=never
      - name: Clean up builds
        run: rm -rfv dist/linux-unpacked
  release-macos:
    runs-on: macos-latest
    needs: build-macos
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish macOS (electron-builder)
        env:
          APPLEID_USERNAME: ${{ secrets.appleid_username }}
          APPLEID_PASSWORD: ${{ secrets.appleid_password }}
          CSC_LINK: ${{ secrets.mac_certs }}
          CSC_KEY_PASSWORD: ${{ secrets.mac_certs_password }}
          GH_TOKEN: ${{ secrets.gh_token }}
          NOTARIZE: true
        run: yarn make:macos --publish always

      - name: Clean up builds
        run: rm -rfv dist/mac dist/mac-arm64

      - uses: actions/upload-artifact@v2
        with:
          name: Instatus-Out-dist-mac
          path: dist/

  release-windows:
    runs-on: windows-latest
    needs: build-windows
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish Windows (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: yarn make:win --publish always

      - name: Clean up builds
        run: Remove-Item dist/win-unpacked -Recurse

      - uses: actions/upload-artifact@v1
        with:
          name: Instatus-Out-dist-win
          path: dist

  release-linux:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish Linuxs (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: yarn make:linux --publish always

      - name: Clean up builds
        run: rm -rfv dist/linux-unpacked

      - uses: actions/upload-artifact@v1
        with:
          name: Instatus-Out-dist-linux
          path: dist