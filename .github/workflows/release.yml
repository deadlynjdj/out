name: Release App

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${env:GITHUB_OUTPUT}
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Make Windows (electron-builder)
        run: yarn make:win --publish=never
      - name: Clean up builds
        run: Remove-Item dist/win-unpacked -Recurse
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Make Linux (electron-builder)
        run: yarn make:linux --publish=never
      - name: Clean up builds
        run: rm -rfv dist/linux-unpacked
  release-windows:
    runs-on: windows-latest
    needs: build-windows
    steps:
      - uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${env:GITHUB_OUTPUT}
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish Windows (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: yarn make:win --publish always

      - name: Clean up builds
        run: Remove-Item dist/win-unpacked -Recurse

      - uses: actions/upload-artifact@v3
        with:
          name: Instatus-Out-dist-win
          path: dist

  release-linux:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish Linuxs (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: yarn make:linux --publish always

      - name: Clean up builds
        run: rm -rfv dist/linux-unpacked

      - uses: actions/upload-artifact@v3
        with:
          name: Instatus-Out-dist-linux
          path: dist
